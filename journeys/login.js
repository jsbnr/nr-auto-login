const USER="user@email.address"
const PASSWORD = "password-here"



const {Builder, Browser} = require('selenium-webdriver');
const $selenium = require("selenium-webdriver");

// Generated by Selenium IDE
const assert = require('assert');

// Generated by New Relic SideKick exporter - Default Suite
    
// A global start timer
const globalStartTime = Date.now();
// Step type definitions
const STEP_TYPE = { HARD: "HARD", SOFT: "SOFT", OPTIONAL: "OPTIONAL" };
// A global indicator of number of steps
let STEP = 1;
// A counter of steps per category
let CATEGORY_STEP = {};
// A record of failed soft steps
let FAILED_STEPS = [];
// A hard failure message
let HARD_FAILURE = "";

const stepLogger = async (type, description, category, stepFn) => {
    const thisStep = STEP++;
    if (!CATEGORY_STEP[category]) {
        CATEGORY_STEP[category] = 1;
    }
    const categoryStep = CATEGORY_STEP[category]++;
    const startTimestamp = Date.now() - globalStartTime;
    console.log(`START  Step ${thisStep}: [${category}:${categoryStep}] start: ${startTimestamp}ms -> ${description}`);
    try {
        await stepFn(); //runs the function for this step
        const endTimestamp = Date.now() - globalStartTime;
        const elapsed = endTimestamp - startTimestamp;
        console.log(`FINISH Step ${thisStep}: [${category}:${categoryStep}] ended: ${endTimestamp}ms, elapsed: ${elapsed}ms -> ${description}`);
        return Promise.resolve(true);
    }
    catch (err) {
        const error = err;
        if (type == STEP_TYPE.HARD) {
            console.log(`ERROR! Step ${thisStep}: [${category}:${categoryStep}] -> ${description}'\n ╚══> This is a HARD step error so processing of further steps will cease and the  journey will be failed.`);
            HARD_FAILURE = `Step ${thisStep}: [${category}:${categoryStep}] -> ${description}`;
            throw error;
        }
        else if (type == STEP_TYPE.SOFT) {
            console.log(`ERROR! Step ${thisStep}: [${category}:${categoryStep}] -> ${description}\n ╚═══> This is a SOFT step error so processing of further steps will continue but the journey will be failed.`);
            console.log(`\n${error.message}\n\n`);
            FAILED_STEPS.push({
                failure: `Step ${thisStep}: [${category}:${categoryStep}] - ${description}`,
                reason: error.message,
            });
            return Promise.resolve(true);
        }
        else {
            console.log(`ERROR! Step ${thisStep}: [${category}:${categoryStep}] -> ${description}\n ╚═══> This is an OPTIONAL step so this error will not fail the journey.`);
            console.log(`\n${error.message}\n\n`);
            return Promise.resolve(true);
        }
    }
}
const By = $selenium.By;
const until = $selenium.until;
const vars = new Map();
const TIMEOUT = 3000;



(async () => {

  // Test Start - login
      
  try {

    let $webDriver = await new Builder().forBrowser(Browser.CHROME).build();
   

    await stepLogger(
      STEP_TYPE.HARD,
      "Open https://login.newrelic.com/login?return_to=https%3A%2F%2Fone.newrelic.com%2F",
      "New Relic Synthetics Journey",
      async () => {
        await $webDriver.get("https://login.newrelic.com/login?return_to=https%3A%2F%2Fone.newrelic.com%2F")
      }
    )

    await stepLogger(
      STEP_TYPE.HARD,
      "Set window size w:1762 h:1278",
      "New Relic Synthetics Journey",
      async () => {
        await $webDriver.manage().window().setRect({ width: 1762, height: 1278 })
      }
    )

    //logout if logged in already
    await stepLogger(
      STEP_TYPE.OPTIONAL,
      "Click css=.AAT1AC-wnd-UserArea-name",
      "New Relic Synthetics Journey",
      async () => {
        await $webDriver.wait(until.elementLocated(By.css(".AAT1AC-wnd-UserArea-name")), TIMEOUT).click()
      }
    )
    await stepLogger(
      STEP_TYPE.OPTIONAL,
      "Click css=.AAT1AC-wnd-UserMenu-logout > .AAT1AC-wnd-PopoverListItem-content",
      "New Relic Synthetics Journey",
      async () => {
        await $webDriver.wait(until.elementLocated(By.css(".AAT1AC-wnd-UserMenu-logout > .AAT1AC-wnd-PopoverListItem-content")), TIMEOUT).click()
      }
    )

    //login
    await stepLogger(
      STEP_TYPE.HARD,
      "Type jbuchanan+springboard@newrelic.com into id=login_email",
      "New Relic Synthetics Journey",
      async () => {
        await $webDriver.wait(until.elementLocated(By.id("login_email")), TIMEOUT).sendKeys(USER)
      }
    )
    await stepLogger(
      STEP_TYPE.HARD,
      "Click id=login_submit",
      "New Relic Synthetics Journey",
      async () => {
        await $webDriver.wait(until.elementLocated(By.id("login_submit")), TIMEOUT).click()
      }
    )
    await stepLogger(
      STEP_TYPE.HARD,
      "Type Peach44Spring! into id=login_password",
      "New Relic Synthetics Journey",
      async () => {
        await $webDriver.wait(until.elementLocated(By.id("login_password")), TIMEOUT).sendKeys(PASSWORD)
      }
    )
    await stepLogger(
      STEP_TYPE.HARD,
      "Click id=login_submit",
      "New Relic Synthetics Journey",
      async () => {
        await $webDriver.wait(until.elementLocated(By.id("login_submit")), TIMEOUT).click()
      }
    )

    //logout
    // await stepLogger(
    //   STEP_TYPE.OPTIONAL,
    //   "Click css=.AAT1AC-wnd-UserArea-name",
    //   "New Relic Synthetics Journey",
    //   async () => {
    //     await $webDriver.wait(until.elementLocated(By.css(".AAT1AC-wnd-UserArea-name")), TIMEOUT).click()
    //   }
    // )
    // await stepLogger(
    //   STEP_TYPE.OPTIONAL,
    //   "Click css=.AAT1AC-wnd-UserMenu-logout > .AAT1AC-wnd-PopoverListItem-content",
    //   "New Relic Synthetics Journey",
    //   async () => {
    //     await $webDriver.wait(until.elementLocated(By.css(".AAT1AC-wnd-UserMenu-logout > .AAT1AC-wnd-PopoverListItem-content")), TIMEOUT).click()
    //   }
    // )
      
      if (FAILED_STEPS.length > 0) {
        console.log(
          `========[ JOURNEY END ]========
          Journey failed: ${FAILED_STEPS.length} soft failures detected:`
        );
        console.log(FAILED_STEPS);
        assert.fail(
          `Journey failed: There were ${FAILED_STEPS.length} soft step failures.`
        );
      } else {
        console.log(
          `========[ JOURNEY END ]========
          Journey completed successfully`
        );
      }
      
    
    } catch (err) {
      console.log(err.message);
      console.log(
        `========[ JOURNEY END ]========
        Journey failed: there was a hard step failure.`
      );
      console.log(HARD_FAILURE);
      if (FAILED_STEPS.length > 0) {
        console.log(
          `There were also ${FAILED_STEPS.length} soft step failures:`
        );
        console.log(FAILED_STEPS);
      }
      assert.fail(
        `Journey failed: There was a hard step failure and ${FAILED_STEPS.length} soft step failures.`
      );
    }
    

})().catch(e => {
  // Deal with the fact the chain failed
});